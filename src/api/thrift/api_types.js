//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var general_ttypes = require('./general_types');


var ttypes = module.exports = {};
ttypes.TransactionType = {
  'TT_Normal' : 0,
  'TT_SmartDeploy' : 1,
  'TT_SmartExecute' : 2,
  'TT_SmartState' : 3
};
ttypes.SmartOperationState = {
  'SOS_Pending' : 0,
  'SOS_Success' : 1,
  'SOS_Failed' : 2
};
ttypes.TransactionState = {
  'INVALID' : 0,
  'VALID' : 1,
  'INPROGRESS' : 2
};
ttypes.TokensListSortField = {
  'TL_Code' : 0,
  'TL_Name' : 1,
  'TL_Address' : 2,
  'TL_TotalSupply' : 3,
  'TL_HoldersCount' : 4,
  'TL_TransfersCount' : 5,
  'TL_TransactionsCount' : 6
};
ttypes.TokenHoldersSortField = {
  'TH_Balance' : 0,
  'TH_TransfersCount' : 1
};
var AmountCommission = module.exports.AmountCommission = function(args) {
  this.commission = 0;
  if (args) {
    if (args.commission !== undefined && args.commission !== null) {
      this.commission = args.commission;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field commission is unset!');
    }
  }
};
AmountCommission.prototype = {};
AmountCommission.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.commission = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AmountCommission.prototype.write = function(output) {
  output.writeStructBegin('AmountCommission');
  if (this.commission !== null && this.commission !== undefined) {
    output.writeFieldBegin('commission', Thrift.Type.I16, 1);
    output.writeI16(this.commission);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CumulativeAmount = module.exports.CumulativeAmount = function(args) {
  this.integral = 0;
  this.fraction = 0;
  if (args) {
    if (args.integral !== undefined && args.integral !== null) {
      this.integral = args.integral;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field integral is unset!');
    }
    if (args.fraction !== undefined && args.fraction !== null) {
      this.fraction = args.fraction;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fraction is unset!');
    }
  }
};
CumulativeAmount.prototype = {};
CumulativeAmount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.integral = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.fraction = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CumulativeAmount.prototype.write = function(output) {
  output.writeStructBegin('CumulativeAmount');
  if (this.integral !== null && this.integral !== undefined) {
    output.writeFieldBegin('integral', Thrift.Type.I64, 1);
    output.writeI64(this.integral);
    output.writeFieldEnd();
  }
  if (this.fraction !== null && this.fraction !== undefined) {
    output.writeFieldBegin('fraction', Thrift.Type.I64, 2);
    output.writeI64(this.fraction);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SmartContractDeploy = module.exports.SmartContractDeploy = function(args) {
  this.sourceCode = null;
  this.byteCodeObjects = null;
  this.hashState = null;
  this.tokenStandard = null;
  if (args) {
    if (args.sourceCode !== undefined && args.sourceCode !== null) {
      this.sourceCode = args.sourceCode;
    }
    if (args.byteCodeObjects !== undefined && args.byteCodeObjects !== null) {
      this.byteCodeObjects = Thrift.copyList(args.byteCodeObjects, [general_ttypes.ByteCodeObject]);
    }
    if (args.hashState !== undefined && args.hashState !== null) {
      this.hashState = args.hashState;
    }
    if (args.tokenStandard !== undefined && args.tokenStandard !== null) {
      this.tokenStandard = args.tokenStandard;
    }
  }
};
SmartContractDeploy.prototype = {};
SmartContractDeploy.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sourceCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.byteCodeObjects = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new general_ttypes.ByteCodeObject();
          elem6.read(input);
          this.byteCodeObjects.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.hashState = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.tokenStandard = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmartContractDeploy.prototype.write = function(output) {
  output.writeStructBegin('SmartContractDeploy');
  if (this.sourceCode !== null && this.sourceCode !== undefined) {
    output.writeFieldBegin('sourceCode', Thrift.Type.STRING, 1);
    output.writeString(this.sourceCode);
    output.writeFieldEnd();
  }
  if (this.byteCodeObjects !== null && this.byteCodeObjects !== undefined) {
    output.writeFieldBegin('byteCodeObjects', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.byteCodeObjects.length);
    for (var iter7 in this.byteCodeObjects)
    {
      if (this.byteCodeObjects.hasOwnProperty(iter7))
      {
        iter7 = this.byteCodeObjects[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.hashState !== null && this.hashState !== undefined) {
    output.writeFieldBegin('hashState', Thrift.Type.STRING, 3);
    output.writeString(this.hashState);
    output.writeFieldEnd();
  }
  if (this.tokenStandard !== null && this.tokenStandard !== undefined) {
    output.writeFieldBegin('tokenStandard', Thrift.Type.I32, 4);
    output.writeI32(this.tokenStandard);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SmartContract = module.exports.SmartContract = function(args) {
  this.address = null;
  this.deployer = null;
  this.smartContractDeploy = null;
  this.objectState = null;
  this.createTime = null;
  this.transactionsCount = null;
  if (args) {
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field address is unset!');
    }
    if (args.deployer !== undefined && args.deployer !== null) {
      this.deployer = args.deployer;
    }
    if (args.smartContractDeploy !== undefined && args.smartContractDeploy !== null) {
      this.smartContractDeploy = new ttypes.SmartContractDeploy(args.smartContractDeploy);
    }
    if (args.objectState !== undefined && args.objectState !== null) {
      this.objectState = args.objectState;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.transactionsCount !== undefined && args.transactionsCount !== null) {
      this.transactionsCount = args.transactionsCount;
    }
  }
};
SmartContract.prototype = {};
SmartContract.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.deployer = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.smartContractDeploy = new ttypes.SmartContractDeploy();
        this.smartContractDeploy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.objectState = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.createTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.transactionsCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmartContract.prototype.write = function(output) {
  output.writeStructBegin('SmartContract');
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 1);
    output.writeBinary(this.address);
    output.writeFieldEnd();
  }
  if (this.deployer !== null && this.deployer !== undefined) {
    output.writeFieldBegin('deployer', Thrift.Type.STRING, 2);
    output.writeBinary(this.deployer);
    output.writeFieldEnd();
  }
  if (this.smartContractDeploy !== null && this.smartContractDeploy !== undefined) {
    output.writeFieldBegin('smartContractDeploy', Thrift.Type.STRUCT, 3);
    this.smartContractDeploy.write(output);
    output.writeFieldEnd();
  }
  if (this.objectState !== null && this.objectState !== undefined) {
    output.writeFieldBegin('objectState', Thrift.Type.STRING, 4);
    output.writeBinary(this.objectState);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I64, 5);
    output.writeI64(this.createTime);
    output.writeFieldEnd();
  }
  if (this.transactionsCount !== null && this.transactionsCount !== undefined) {
    output.writeFieldBegin('transactionsCount', Thrift.Type.I32, 6);
    output.writeI32(this.transactionsCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SmartContractInvocation = module.exports.SmartContractInvocation = function(args) {
  this.method = null;
  this.params = null;
  this.usedContracts = null;
  this.forgetNewState = null;
  this.smartContractDeploy = null;
  this.version = 1;
  if (args) {
    if (args.method !== undefined && args.method !== null) {
      this.method = args.method;
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = Thrift.copyList(args.params, [general_ttypes.Variant]);
    }
    if (args.usedContracts !== undefined && args.usedContracts !== null) {
      this.usedContracts = Thrift.copyList(args.usedContracts, [null]);
    }
    if (args.forgetNewState !== undefined && args.forgetNewState !== null) {
      this.forgetNewState = args.forgetNewState;
    }
    if (args.smartContractDeploy !== undefined && args.smartContractDeploy !== null) {
      this.smartContractDeploy = new ttypes.SmartContractDeploy(args.smartContractDeploy);
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
  }
};
SmartContractInvocation.prototype = {};
SmartContractInvocation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.method = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.params = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new general_ttypes.Variant();
          elem14.read(input);
          this.params.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size15 = 0;
        var _rtmp319;
        this.usedContracts = [];
        var _etype18 = 0;
        _rtmp319 = input.readListBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = input.readBinary();
          this.usedContracts.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.forgetNewState = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.smartContractDeploy = new ttypes.SmartContractDeploy();
        this.smartContractDeploy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I16) {
        this.version = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmartContractInvocation.prototype.write = function(output) {
  output.writeStructBegin('SmartContractInvocation');
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.STRING, 1);
    output.writeString(this.method);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.params.length);
    for (var iter22 in this.params)
    {
      if (this.params.hasOwnProperty(iter22))
      {
        iter22 = this.params[iter22];
        iter22.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.usedContracts !== null && this.usedContracts !== undefined) {
    output.writeFieldBegin('usedContracts', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.usedContracts.length);
    for (var iter23 in this.usedContracts)
    {
      if (this.usedContracts.hasOwnProperty(iter23))
      {
        iter23 = this.usedContracts[iter23];
        output.writeBinary(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.forgetNewState !== null && this.forgetNewState !== undefined) {
    output.writeFieldBegin('forgetNewState', Thrift.Type.BOOL, 4);
    output.writeBool(this.forgetNewState);
    output.writeFieldEnd();
  }
  if (this.smartContractDeploy !== null && this.smartContractDeploy !== undefined) {
    output.writeFieldBegin('smartContractDeploy', Thrift.Type.STRUCT, 5);
    this.smartContractDeploy.write(output);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I16, 6);
    output.writeI16(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TransactionId = module.exports.TransactionId = function(args) {
  this.poolSeq = null;
  this.index = null;
  if (args) {
    if (args.poolSeq !== undefined && args.poolSeq !== null) {
      this.poolSeq = args.poolSeq;
    }
    if (args.index !== undefined && args.index !== null) {
      this.index = args.index;
    }
  }
};
TransactionId.prototype = {};
TransactionId.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.poolSeq = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.index = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransactionId.prototype.write = function(output) {
  output.writeStructBegin('TransactionId');
  if (this.poolSeq !== null && this.poolSeq !== undefined) {
    output.writeFieldBegin('poolSeq', Thrift.Type.I64, 1);
    output.writeI64(this.poolSeq);
    output.writeFieldEnd();
  }
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I32, 2);
    output.writeI32(this.index);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenDeployTransInfo = module.exports.TokenDeployTransInfo = function(args) {
  this.name = null;
  this.code = null;
  this.tokenStandard = null;
  this.state = null;
  this.stateTransaction = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.tokenStandard !== undefined && args.tokenStandard !== null) {
      this.tokenStandard = args.tokenStandard;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
    if (args.stateTransaction !== undefined && args.stateTransaction !== null) {
      this.stateTransaction = new ttypes.TransactionId(args.stateTransaction);
    }
  }
};
TokenDeployTransInfo.prototype = {};
TokenDeployTransInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.tokenStandard = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.stateTransaction = new ttypes.TransactionId();
        this.stateTransaction.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenDeployTransInfo.prototype.write = function(output) {
  output.writeStructBegin('TokenDeployTransInfo');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 2);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  if (this.tokenStandard !== null && this.tokenStandard !== undefined) {
    output.writeFieldBegin('tokenStandard', Thrift.Type.I32, 3);
    output.writeI32(this.tokenStandard);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 4);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.stateTransaction !== null && this.stateTransaction !== undefined) {
    output.writeFieldBegin('stateTransaction', Thrift.Type.STRUCT, 5);
    this.stateTransaction.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenTransferTransInfo = module.exports.TokenTransferTransInfo = function(args) {
  this.code = null;
  this.sender = null;
  this.receiver = null;
  this.amount = null;
  this.state = null;
  this.stateTransaction = null;
  this.transferSuccess = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.sender !== undefined && args.sender !== null) {
      this.sender = args.sender;
    }
    if (args.receiver !== undefined && args.receiver !== null) {
      this.receiver = args.receiver;
    }
    if (args.amount !== undefined && args.amount !== null) {
      this.amount = args.amount;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
    if (args.stateTransaction !== undefined && args.stateTransaction !== null) {
      this.stateTransaction = new ttypes.TransactionId(args.stateTransaction);
    }
    if (args.transferSuccess !== undefined && args.transferSuccess !== null) {
      this.transferSuccess = args.transferSuccess;
    }
  }
};
TokenTransferTransInfo.prototype = {};
TokenTransferTransInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sender = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.receiver = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.amount = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.stateTransaction = new ttypes.TransactionId();
        this.stateTransaction.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.transferSuccess = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenTransferTransInfo.prototype.write = function(output) {
  output.writeStructBegin('TokenTransferTransInfo');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 1);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  if (this.sender !== null && this.sender !== undefined) {
    output.writeFieldBegin('sender', Thrift.Type.STRING, 2);
    output.writeBinary(this.sender);
    output.writeFieldEnd();
  }
  if (this.receiver !== null && this.receiver !== undefined) {
    output.writeFieldBegin('receiver', Thrift.Type.STRING, 3);
    output.writeBinary(this.receiver);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.STRING, 4);
    output.writeString(this.amount);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 5);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.stateTransaction !== null && this.stateTransaction !== undefined) {
    output.writeFieldBegin('stateTransaction', Thrift.Type.STRUCT, 6);
    this.stateTransaction.write(output);
    output.writeFieldEnd();
  }
  if (this.transferSuccess !== null && this.transferSuccess !== undefined) {
    output.writeFieldBegin('transferSuccess', Thrift.Type.BOOL, 7);
    output.writeBool(this.transferSuccess);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SmartDeployTransInfo = module.exports.SmartDeployTransInfo = function(args) {
  this.state = null;
  this.stateTransaction = null;
  if (args) {
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
    if (args.stateTransaction !== undefined && args.stateTransaction !== null) {
      this.stateTransaction = new ttypes.TransactionId(args.stateTransaction);
    }
  }
};
SmartDeployTransInfo.prototype = {};
SmartDeployTransInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.stateTransaction = new ttypes.TransactionId();
        this.stateTransaction.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmartDeployTransInfo.prototype.write = function(output) {
  output.writeStructBegin('SmartDeployTransInfo');
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 1);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.stateTransaction !== null && this.stateTransaction !== undefined) {
    output.writeFieldBegin('stateTransaction', Thrift.Type.STRUCT, 2);
    this.stateTransaction.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SmartExecutionTransInfo = module.exports.SmartExecutionTransInfo = function(args) {
  this.method = null;
  this.params = null;
  this.state = null;
  this.stateTransaction = null;
  if (args) {
    if (args.method !== undefined && args.method !== null) {
      this.method = args.method;
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = Thrift.copyList(args.params, [general_ttypes.Variant]);
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
    if (args.stateTransaction !== undefined && args.stateTransaction !== null) {
      this.stateTransaction = new ttypes.TransactionId(args.stateTransaction);
    }
  }
};
SmartExecutionTransInfo.prototype = {};
SmartExecutionTransInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.method = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.params = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new general_ttypes.Variant();
          elem30.read(input);
          this.params.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.stateTransaction = new ttypes.TransactionId();
        this.stateTransaction.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmartExecutionTransInfo.prototype.write = function(output) {
  output.writeStructBegin('SmartExecutionTransInfo');
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.STRING, 1);
    output.writeString(this.method);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.params.length);
    for (var iter31 in this.params)
    {
      if (this.params.hasOwnProperty(iter31))
      {
        iter31 = this.params[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 3);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.stateTransaction !== null && this.stateTransaction !== undefined) {
    output.writeFieldBegin('stateTransaction', Thrift.Type.STRUCT, 4);
    this.stateTransaction.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExtraFee = module.exports.ExtraFee = function(args) {
  this.sum = null;
  this.comment = null;
  this.transactionId = null;
  if (args) {
    if (args.sum !== undefined && args.sum !== null) {
      this.sum = new general_ttypes.Amount(args.sum);
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
    if (args.transactionId !== undefined && args.transactionId !== null) {
      this.transactionId = new ttypes.TransactionId(args.transactionId);
    }
  }
};
ExtraFee.prototype = {};
ExtraFee.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sum = new general_ttypes.Amount();
        this.sum.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.transactionId = new ttypes.TransactionId();
        this.transactionId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExtraFee.prototype.write = function(output) {
  output.writeStructBegin('ExtraFee');
  if (this.sum !== null && this.sum !== undefined) {
    output.writeFieldBegin('sum', Thrift.Type.STRUCT, 1);
    this.sum.write(output);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 2);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  if (this.transactionId !== null && this.transactionId !== undefined) {
    output.writeFieldBegin('transactionId', Thrift.Type.STRUCT, 3);
    this.transactionId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SmartStateTransInfo = module.exports.SmartStateTransInfo = function(args) {
  this.success = null;
  this.executionFee = null;
  this.returnValue = null;
  this.startTransaction = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.executionFee !== undefined && args.executionFee !== null) {
      this.executionFee = new general_ttypes.Amount(args.executionFee);
    }
    if (args.returnValue !== undefined && args.returnValue !== null) {
      this.returnValue = new general_ttypes.Variant(args.returnValue);
    }
    if (args.startTransaction !== undefined && args.startTransaction !== null) {
      this.startTransaction = new ttypes.TransactionId(args.startTransaction);
    }
  }
};
SmartStateTransInfo.prototype = {};
SmartStateTransInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.executionFee = new general_ttypes.Amount();
        this.executionFee.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.returnValue = new general_ttypes.Variant();
        this.returnValue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.startTransaction = new ttypes.TransactionId();
        this.startTransaction.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmartStateTransInfo.prototype.write = function(output) {
  output.writeStructBegin('SmartStateTransInfo');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.executionFee !== null && this.executionFee !== undefined) {
    output.writeFieldBegin('executionFee', Thrift.Type.STRUCT, 2);
    this.executionFee.write(output);
    output.writeFieldEnd();
  }
  if (this.returnValue !== null && this.returnValue !== undefined) {
    output.writeFieldBegin('returnValue', Thrift.Type.STRUCT, 3);
    this.returnValue.write(output);
    output.writeFieldEnd();
  }
  if (this.startTransaction !== null && this.startTransaction !== undefined) {
    output.writeFieldBegin('startTransaction', Thrift.Type.STRUCT, 4);
    this.startTransaction.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SmartTransInfo = module.exports.SmartTransInfo = function(args) {
  this.v_tokenDeploy = null;
  this.v_tokenTransfer = null;
  this.v_smartDeploy = null;
  this.v_smartExecution = null;
  this.v_smartState = null;
  if (args) {
    if (args.v_tokenDeploy !== undefined && args.v_tokenDeploy !== null) {
      this.v_tokenDeploy = new ttypes.TokenDeployTransInfo(args.v_tokenDeploy);
    }
    if (args.v_tokenTransfer !== undefined && args.v_tokenTransfer !== null) {
      this.v_tokenTransfer = new ttypes.TokenTransferTransInfo(args.v_tokenTransfer);
    }
    if (args.v_smartDeploy !== undefined && args.v_smartDeploy !== null) {
      this.v_smartDeploy = new ttypes.SmartDeployTransInfo(args.v_smartDeploy);
    }
    if (args.v_smartExecution !== undefined && args.v_smartExecution !== null) {
      this.v_smartExecution = new ttypes.SmartExecutionTransInfo(args.v_smartExecution);
    }
    if (args.v_smartState !== undefined && args.v_smartState !== null) {
      this.v_smartState = new ttypes.SmartStateTransInfo(args.v_smartState);
    }
  }
};
SmartTransInfo.prototype = {};
SmartTransInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.v_tokenDeploy = new ttypes.TokenDeployTransInfo();
        this.v_tokenDeploy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.v_tokenTransfer = new ttypes.TokenTransferTransInfo();
        this.v_tokenTransfer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.v_smartDeploy = new ttypes.SmartDeployTransInfo();
        this.v_smartDeploy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.v_smartExecution = new ttypes.SmartExecutionTransInfo();
        this.v_smartExecution.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.v_smartState = new ttypes.SmartStateTransInfo();
        this.v_smartState.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmartTransInfo.prototype.write = function(output) {
  output.writeStructBegin('SmartTransInfo');
  if (this.v_tokenDeploy !== null && this.v_tokenDeploy !== undefined) {
    output.writeFieldBegin('v_tokenDeploy', Thrift.Type.STRUCT, 1);
    this.v_tokenDeploy.write(output);
    output.writeFieldEnd();
  }
  if (this.v_tokenTransfer !== null && this.v_tokenTransfer !== undefined) {
    output.writeFieldBegin('v_tokenTransfer', Thrift.Type.STRUCT, 2);
    this.v_tokenTransfer.write(output);
    output.writeFieldEnd();
  }
  if (this.v_smartDeploy !== null && this.v_smartDeploy !== undefined) {
    output.writeFieldBegin('v_smartDeploy', Thrift.Type.STRUCT, 3);
    this.v_smartDeploy.write(output);
    output.writeFieldEnd();
  }
  if (this.v_smartExecution !== null && this.v_smartExecution !== undefined) {
    output.writeFieldBegin('v_smartExecution', Thrift.Type.STRUCT, 4);
    this.v_smartExecution.write(output);
    output.writeFieldEnd();
  }
  if (this.v_smartState !== null && this.v_smartState !== undefined) {
    output.writeFieldBegin('v_smartState', Thrift.Type.STRUCT, 5);
    this.v_smartState.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Transaction = module.exports.Transaction = function(args) {
  this.id = null;
  this.source = null;
  this.target = null;
  this.amount = null;
  this.balance = null;
  this.currency = null;
  this.signature = null;
  this.smartContract = null;
  this.fee = null;
  this.timeCreation = null;
  this.userFields = null;
  this.type = null;
  this.smartInfo = null;
  this.extraFee = null;
  this.poolNumber = null;
  this.usedContracts = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.target !== undefined && args.target !== null) {
      this.target = args.target;
    }
    if (args.amount !== undefined && args.amount !== null) {
      this.amount = new general_ttypes.Amount(args.amount);
    }
    if (args.balance !== undefined && args.balance !== null) {
      this.balance = new general_ttypes.Amount(args.balance);
    }
    if (args.currency !== undefined && args.currency !== null) {
      this.currency = args.currency;
    }
    if (args.signature !== undefined && args.signature !== null) {
      this.signature = args.signature;
    }
    if (args.smartContract !== undefined && args.smartContract !== null) {
      this.smartContract = new ttypes.SmartContractInvocation(args.smartContract);
    }
    if (args.fee !== undefined && args.fee !== null) {
      this.fee = new ttypes.AmountCommission(args.fee);
    }
    if (args.timeCreation !== undefined && args.timeCreation !== null) {
      this.timeCreation = args.timeCreation;
    }
    if (args.userFields !== undefined && args.userFields !== null) {
      this.userFields = args.userFields;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.smartInfo !== undefined && args.smartInfo !== null) {
      this.smartInfo = new ttypes.SmartTransInfo(args.smartInfo);
    }
    if (args.extraFee !== undefined && args.extraFee !== null) {
      this.extraFee = Thrift.copyList(args.extraFee, [ttypes.ExtraFee]);
    }
    if (args.poolNumber !== undefined && args.poolNumber !== null) {
      this.poolNumber = args.poolNumber;
    }
    if (args.usedContracts !== undefined && args.usedContracts !== null) {
      this.usedContracts = Thrift.copyList(args.usedContracts, [null]);
    }
  }
};
Transaction.prototype = {};
Transaction.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.target = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.amount = new general_ttypes.Amount();
        this.amount.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.balance = new general_ttypes.Amount();
        this.balance.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BYTE) {
        this.currency = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.signature = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.smartContract = new ttypes.SmartContractInvocation();
        this.smartContract.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.fee = new ttypes.AmountCommission();
        this.fee.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.timeCreation = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.userFields = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.smartInfo = new ttypes.SmartTransInfo();
        this.smartInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.extraFee = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.ExtraFee();
          elem38.read(input);
          this.extraFee.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.poolNumber = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.LIST) {
        var _size39 = 0;
        var _rtmp343;
        this.usedContracts = [];
        var _etype42 = 0;
        _rtmp343 = input.readListBegin();
        _etype42 = _rtmp343.etype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var elem45 = null;
          elem45 = input.readBinary();
          this.usedContracts.push(elem45);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Transaction.prototype.write = function(output) {
  output.writeStructBegin('Transaction');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 2);
    output.writeBinary(this.source);
    output.writeFieldEnd();
  }
  if (this.target !== null && this.target !== undefined) {
    output.writeFieldBegin('target', Thrift.Type.STRING, 3);
    output.writeBinary(this.target);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.STRUCT, 4);
    this.amount.write(output);
    output.writeFieldEnd();
  }
  if (this.balance !== null && this.balance !== undefined) {
    output.writeFieldBegin('balance', Thrift.Type.STRUCT, 5);
    this.balance.write(output);
    output.writeFieldEnd();
  }
  if (this.currency !== null && this.currency !== undefined) {
    output.writeFieldBegin('currency', Thrift.Type.BYTE, 6);
    output.writeByte(this.currency);
    output.writeFieldEnd();
  }
  if (this.signature !== null && this.signature !== undefined) {
    output.writeFieldBegin('signature', Thrift.Type.STRING, 7);
    output.writeBinary(this.signature);
    output.writeFieldEnd();
  }
  if (this.smartContract !== null && this.smartContract !== undefined) {
    output.writeFieldBegin('smartContract', Thrift.Type.STRUCT, 8);
    this.smartContract.write(output);
    output.writeFieldEnd();
  }
  if (this.fee !== null && this.fee !== undefined) {
    output.writeFieldBegin('fee', Thrift.Type.STRUCT, 9);
    this.fee.write(output);
    output.writeFieldEnd();
  }
  if (this.timeCreation !== null && this.timeCreation !== undefined) {
    output.writeFieldBegin('timeCreation', Thrift.Type.I64, 10);
    output.writeI64(this.timeCreation);
    output.writeFieldEnd();
  }
  if (this.userFields !== null && this.userFields !== undefined) {
    output.writeFieldBegin('userFields', Thrift.Type.STRING, 11);
    output.writeBinary(this.userFields);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 12);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.smartInfo !== null && this.smartInfo !== undefined) {
    output.writeFieldBegin('smartInfo', Thrift.Type.STRUCT, 13);
    this.smartInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.extraFee !== null && this.extraFee !== undefined) {
    output.writeFieldBegin('extraFee', Thrift.Type.LIST, 14);
    output.writeListBegin(Thrift.Type.STRUCT, this.extraFee.length);
    for (var iter46 in this.extraFee)
    {
      if (this.extraFee.hasOwnProperty(iter46))
      {
        iter46 = this.extraFee[iter46];
        iter46.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.poolNumber !== null && this.poolNumber !== undefined) {
    output.writeFieldBegin('poolNumber', Thrift.Type.I64, 15);
    output.writeI64(this.poolNumber);
    output.writeFieldEnd();
  }
  if (this.usedContracts !== null && this.usedContracts !== undefined) {
    output.writeFieldBegin('usedContracts', Thrift.Type.LIST, 16);
    output.writeListBegin(Thrift.Type.STRING, this.usedContracts.length);
    for (var iter47 in this.usedContracts)
    {
      if (this.usedContracts.hasOwnProperty(iter47))
      {
        iter47 = this.usedContracts[iter47];
        output.writeBinary(iter47);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SealedTransaction = module.exports.SealedTransaction = function(args) {
  this.id = null;
  this.trxn = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = new ttypes.TransactionId(args.id);
    }
    if (args.trxn !== undefined && args.trxn !== null) {
      this.trxn = new ttypes.Transaction(args.trxn);
    }
  }
};
SealedTransaction.prototype = {};
SealedTransaction.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.id = new ttypes.TransactionId();
        this.id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.trxn = new ttypes.Transaction();
        this.trxn.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SealedTransaction.prototype.write = function(output) {
  output.writeStructBegin('SealedTransaction');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRUCT, 1);
    this.id.write(output);
    output.writeFieldEnd();
  }
  if (this.trxn !== null && this.trxn !== undefined) {
    output.writeFieldBegin('trxn', Thrift.Type.STRUCT, 2);
    this.trxn.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Pool = module.exports.Pool = function(args) {
  this.hash = null;
  this.prevHash = null;
  this.time = null;
  this.transactionsCount = null;
  this.poolNumber = null;
  this.writer = null;
  this.totalFee = null;
  if (args) {
    if (args.hash !== undefined && args.hash !== null) {
      this.hash = args.hash;
    }
    if (args.prevHash !== undefined && args.prevHash !== null) {
      this.prevHash = args.prevHash;
    }
    if (args.time !== undefined && args.time !== null) {
      this.time = args.time;
    }
    if (args.transactionsCount !== undefined && args.transactionsCount !== null) {
      this.transactionsCount = args.transactionsCount;
    }
    if (args.poolNumber !== undefined && args.poolNumber !== null) {
      this.poolNumber = args.poolNumber;
    }
    if (args.writer !== undefined && args.writer !== null) {
      this.writer = args.writer;
    }
    if (args.totalFee !== undefined && args.totalFee !== null) {
      this.totalFee = new general_ttypes.Amount(args.totalFee);
    }
  }
};
Pool.prototype = {};
Pool.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.hash = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.prevHash = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.transactionsCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.poolNumber = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.writer = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.totalFee = new general_ttypes.Amount();
        this.totalFee.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Pool.prototype.write = function(output) {
  output.writeStructBegin('Pool');
  if (this.hash !== null && this.hash !== undefined) {
    output.writeFieldBegin('hash', Thrift.Type.STRING, 1);
    output.writeBinary(this.hash);
    output.writeFieldEnd();
  }
  if (this.prevHash !== null && this.prevHash !== undefined) {
    output.writeFieldBegin('prevHash', Thrift.Type.STRING, 2);
    output.writeBinary(this.prevHash);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I64, 3);
    output.writeI64(this.time);
    output.writeFieldEnd();
  }
  if (this.transactionsCount !== null && this.transactionsCount !== undefined) {
    output.writeFieldBegin('transactionsCount', Thrift.Type.I32, 4);
    output.writeI32(this.transactionsCount);
    output.writeFieldEnd();
  }
  if (this.poolNumber !== null && this.poolNumber !== undefined) {
    output.writeFieldBegin('poolNumber', Thrift.Type.I64, 5);
    output.writeI64(this.poolNumber);
    output.writeFieldEnd();
  }
  if (this.writer !== null && this.writer !== undefined) {
    output.writeFieldBegin('writer', Thrift.Type.STRING, 6);
    output.writeBinary(this.writer);
    output.writeFieldEnd();
  }
  if (this.totalFee !== null && this.totalFee !== undefined) {
    output.writeFieldBegin('totalFee', Thrift.Type.STRUCT, 7);
    this.totalFee.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WalletData = module.exports.WalletData = function(args) {
  this.walletId = null;
  this.balance = null;
  this.lastTransactionId = null;
  if (args) {
    if (args.walletId !== undefined && args.walletId !== null) {
      this.walletId = args.walletId;
    }
    if (args.balance !== undefined && args.balance !== null) {
      this.balance = new general_ttypes.Amount(args.balance);
    }
    if (args.lastTransactionId !== undefined && args.lastTransactionId !== null) {
      this.lastTransactionId = args.lastTransactionId;
    }
  }
};
WalletData.prototype = {};
WalletData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.walletId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.balance = new general_ttypes.Amount();
        this.balance.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.lastTransactionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WalletData.prototype.write = function(output) {
  output.writeStructBegin('WalletData');
  if (this.walletId !== null && this.walletId !== undefined) {
    output.writeFieldBegin('walletId', Thrift.Type.I32, 1);
    output.writeI32(this.walletId);
    output.writeFieldEnd();
  }
  if (this.balance !== null && this.balance !== undefined) {
    output.writeFieldBegin('balance', Thrift.Type.STRUCT, 2);
    this.balance.write(output);
    output.writeFieldEnd();
  }
  if (this.lastTransactionId !== null && this.lastTransactionId !== undefined) {
    output.writeFieldBegin('lastTransactionId', Thrift.Type.I64, 3);
    output.writeI64(this.lastTransactionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PeriodStats = module.exports.PeriodStats = function(args) {
  this.periodDuration = null;
  this.poolsCount = null;
  this.transactionsCount = null;
  this.balancePerCurrency = null;
  this.smartContractsCount = null;
  this.transactionsSmartCount = null;
  if (args) {
    if (args.periodDuration !== undefined && args.periodDuration !== null) {
      this.periodDuration = args.periodDuration;
    }
    if (args.poolsCount !== undefined && args.poolsCount !== null) {
      this.poolsCount = args.poolsCount;
    }
    if (args.transactionsCount !== undefined && args.transactionsCount !== null) {
      this.transactionsCount = args.transactionsCount;
    }
    if (args.balancePerCurrency !== undefined && args.balancePerCurrency !== null) {
      this.balancePerCurrency = Thrift.copyMap(args.balancePerCurrency, [ttypes.CumulativeAmount]);
    }
    if (args.smartContractsCount !== undefined && args.smartContractsCount !== null) {
      this.smartContractsCount = args.smartContractsCount;
    }
    if (args.transactionsSmartCount !== undefined && args.transactionsSmartCount !== null) {
      this.transactionsSmartCount = args.transactionsSmartCount;
    }
  }
};
PeriodStats.prototype = {};
PeriodStats.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.periodDuration = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.poolsCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.transactionsCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size48 = 0;
        var _rtmp352;
        this.balancePerCurrency = {};
        var _ktype49 = 0;
        var _vtype50 = 0;
        _rtmp352 = input.readMapBegin();
        _ktype49 = _rtmp352.ktype;
        _vtype50 = _rtmp352.vtype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var key54 = null;
          var val55 = null;
          key54 = input.readByte();
          val55 = new ttypes.CumulativeAmount();
          val55.read(input);
          this.balancePerCurrency[key54] = val55;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.smartContractsCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.transactionsSmartCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PeriodStats.prototype.write = function(output) {
  output.writeStructBegin('PeriodStats');
  if (this.periodDuration !== null && this.periodDuration !== undefined) {
    output.writeFieldBegin('periodDuration', Thrift.Type.I64, 1);
    output.writeI64(this.periodDuration);
    output.writeFieldEnd();
  }
  if (this.poolsCount !== null && this.poolsCount !== undefined) {
    output.writeFieldBegin('poolsCount', Thrift.Type.I32, 2);
    output.writeI32(this.poolsCount);
    output.writeFieldEnd();
  }
  if (this.transactionsCount !== null && this.transactionsCount !== undefined) {
    output.writeFieldBegin('transactionsCount', Thrift.Type.I32, 3);
    output.writeI32(this.transactionsCount);
    output.writeFieldEnd();
  }
  if (this.balancePerCurrency !== null && this.balancePerCurrency !== undefined) {
    output.writeFieldBegin('balancePerCurrency', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.BYTE, Thrift.Type.STRUCT, Thrift.objectLength(this.balancePerCurrency));
    for (var kiter56 in this.balancePerCurrency)
    {
      if (this.balancePerCurrency.hasOwnProperty(kiter56))
      {
        var viter57 = this.balancePerCurrency[kiter56];
        output.writeByte(kiter56);
        viter57.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.smartContractsCount !== null && this.smartContractsCount !== undefined) {
    output.writeFieldBegin('smartContractsCount', Thrift.Type.I32, 5);
    output.writeI32(this.smartContractsCount);
    output.writeFieldEnd();
  }
  if (this.transactionsSmartCount !== null && this.transactionsSmartCount !== undefined) {
    output.writeFieldBegin('transactionsSmartCount', Thrift.Type.I32, 6);
    output.writeI32(this.transactionsSmartCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WalletDataGetResult = module.exports.WalletDataGetResult = function(args) {
  this.status = null;
  this.walletData = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.walletData !== undefined && args.walletData !== null) {
      this.walletData = new ttypes.WalletData(args.walletData);
    }
  }
};
WalletDataGetResult.prototype = {};
WalletDataGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.walletData = new ttypes.WalletData();
        this.walletData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WalletDataGetResult.prototype.write = function(output) {
  output.writeStructBegin('WalletDataGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.walletData !== null && this.walletData !== undefined) {
    output.writeFieldBegin('walletData', Thrift.Type.STRUCT, 2);
    this.walletData.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WalletIdGetResult = module.exports.WalletIdGetResult = function(args) {
  this.status = null;
  this.walletId = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.walletId !== undefined && args.walletId !== null) {
      this.walletId = args.walletId;
    }
  }
};
WalletIdGetResult.prototype = {};
WalletIdGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.walletId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WalletIdGetResult.prototype.write = function(output) {
  output.writeStructBegin('WalletIdGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.walletId !== null && this.walletId !== undefined) {
    output.writeFieldBegin('walletId', Thrift.Type.I32, 2);
    output.writeI32(this.walletId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WalletTransactionsCountGetResult = module.exports.WalletTransactionsCountGetResult = function(args) {
  this.status = null;
  this.lastTransactionInnerId = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.lastTransactionInnerId !== undefined && args.lastTransactionInnerId !== null) {
      this.lastTransactionInnerId = args.lastTransactionInnerId;
    }
  }
};
WalletTransactionsCountGetResult.prototype = {};
WalletTransactionsCountGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastTransactionInnerId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WalletTransactionsCountGetResult.prototype.write = function(output) {
  output.writeStructBegin('WalletTransactionsCountGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.lastTransactionInnerId !== null && this.lastTransactionInnerId !== undefined) {
    output.writeFieldBegin('lastTransactionInnerId', Thrift.Type.I64, 2);
    output.writeI64(this.lastTransactionInnerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WalletBalanceGetResult = module.exports.WalletBalanceGetResult = function(args) {
  this.status = null;
  this.balance = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.balance !== undefined && args.balance !== null) {
      this.balance = new general_ttypes.Amount(args.balance);
    }
  }
};
WalletBalanceGetResult.prototype = {};
WalletBalanceGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.balance = new general_ttypes.Amount();
        this.balance.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WalletBalanceGetResult.prototype.write = function(output) {
  output.writeStructBegin('WalletBalanceGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.balance !== null && this.balance !== undefined) {
    output.writeFieldBegin('balance', Thrift.Type.STRUCT, 2);
    this.balance.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TransactionGetResult = module.exports.TransactionGetResult = function(args) {
  this.status = null;
  this.found = null;
  this.state = null;
  this.roundNum = null;
  this.transaction = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.found !== undefined && args.found !== null) {
      this.found = args.found;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
    if (args.roundNum !== undefined && args.roundNum !== null) {
      this.roundNum = args.roundNum;
    }
    if (args.transaction !== undefined && args.transaction !== null) {
      this.transaction = new ttypes.SealedTransaction(args.transaction);
    }
  }
};
TransactionGetResult.prototype = {};
TransactionGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.found = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.roundNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.transaction = new ttypes.SealedTransaction();
        this.transaction.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransactionGetResult.prototype.write = function(output) {
  output.writeStructBegin('TransactionGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.found !== null && this.found !== undefined) {
    output.writeFieldBegin('found', Thrift.Type.BOOL, 2);
    output.writeBool(this.found);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 3);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.roundNum !== null && this.roundNum !== undefined) {
    output.writeFieldBegin('roundNum', Thrift.Type.I32, 4);
    output.writeI32(this.roundNum);
    output.writeFieldEnd();
  }
  if (this.transaction !== null && this.transaction !== undefined) {
    output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
    this.transaction.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TransactionsGetResult = module.exports.TransactionsGetResult = function(args) {
  this.status = null;
  this.result = null;
  this.total_trxns_count = null;
  this.transactions = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.result !== undefined && args.result !== null) {
      this.result = args.result;
    }
    if (args.total_trxns_count !== undefined && args.total_trxns_count !== null) {
      this.total_trxns_count = args.total_trxns_count;
    }
    if (args.transactions !== undefined && args.transactions !== null) {
      this.transactions = Thrift.copyList(args.transactions, [ttypes.SealedTransaction]);
    }
  }
};
TransactionsGetResult.prototype = {};
TransactionsGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.result = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.total_trxns_count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size58 = 0;
        var _rtmp362;
        this.transactions = [];
        var _etype61 = 0;
        _rtmp362 = input.readListBegin();
        _etype61 = _rtmp362.etype;
        _size58 = _rtmp362.size;
        for (var _i63 = 0; _i63 < _size58; ++_i63)
        {
          var elem64 = null;
          elem64 = new ttypes.SealedTransaction();
          elem64.read(input);
          this.transactions.push(elem64);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransactionsGetResult.prototype.write = function(output) {
  output.writeStructBegin('TransactionsGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.BOOL, 2);
    output.writeBool(this.result);
    output.writeFieldEnd();
  }
  if (this.total_trxns_count !== null && this.total_trxns_count !== undefined) {
    output.writeFieldBegin('total_trxns_count', Thrift.Type.I32, 3);
    output.writeI32(this.total_trxns_count);
    output.writeFieldEnd();
  }
  if (this.transactions !== null && this.transactions !== undefined) {
    output.writeFieldBegin('transactions', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.transactions.length);
    for (var iter65 in this.transactions)
    {
      if (this.transactions.hasOwnProperty(iter65))
      {
        iter65 = this.transactions[iter65];
        iter65.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TransactionFlowResult = module.exports.TransactionFlowResult = function(args) {
  this.status = null;
  this.smart_contract_result = null;
  this.roundNum = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.smart_contract_result !== undefined && args.smart_contract_result !== null) {
      this.smart_contract_result = new general_ttypes.Variant(args.smart_contract_result);
    }
    if (args.roundNum !== undefined && args.roundNum !== null) {
      this.roundNum = args.roundNum;
    }
  }
};
TransactionFlowResult.prototype = {};
TransactionFlowResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.smart_contract_result = new general_ttypes.Variant();
        this.smart_contract_result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.roundNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransactionFlowResult.prototype.write = function(output) {
  output.writeStructBegin('TransactionFlowResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.smart_contract_result !== null && this.smart_contract_result !== undefined) {
    output.writeFieldBegin('smart_contract_result', Thrift.Type.STRUCT, 2);
    this.smart_contract_result.write(output);
    output.writeFieldEnd();
  }
  if (this.roundNum !== null && this.roundNum !== undefined) {
    output.writeFieldBegin('roundNum', Thrift.Type.I32, 3);
    output.writeI32(this.roundNum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PoolListGetResult = module.exports.PoolListGetResult = function(args) {
  this.status = null;
  this.result = null;
  this.count = null;
  this.pools = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.result !== undefined && args.result !== null) {
      this.result = args.result;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.pools !== undefined && args.pools !== null) {
      this.pools = Thrift.copyList(args.pools, [ttypes.Pool]);
    }
  }
};
PoolListGetResult.prototype = {};
PoolListGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.result = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size66 = 0;
        var _rtmp370;
        this.pools = [];
        var _etype69 = 0;
        _rtmp370 = input.readListBegin();
        _etype69 = _rtmp370.etype;
        _size66 = _rtmp370.size;
        for (var _i71 = 0; _i71 < _size66; ++_i71)
        {
          var elem72 = null;
          elem72 = new ttypes.Pool();
          elem72.read(input);
          this.pools.push(elem72);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PoolListGetResult.prototype.write = function(output) {
  output.writeStructBegin('PoolListGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.BOOL, 2);
    output.writeBool(this.result);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 3);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.pools !== null && this.pools !== undefined) {
    output.writeFieldBegin('pools', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.pools.length);
    for (var iter73 in this.pools)
    {
      if (this.pools.hasOwnProperty(iter73))
      {
        iter73 = this.pools[iter73];
        iter73.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PoolInfoGetResult = module.exports.PoolInfoGetResult = function(args) {
  this.status = null;
  this.isFound = null;
  this.pool = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.isFound !== undefined && args.isFound !== null) {
      this.isFound = args.isFound;
    }
    if (args.pool !== undefined && args.pool !== null) {
      this.pool = new ttypes.Pool(args.pool);
    }
  }
};
PoolInfoGetResult.prototype = {};
PoolInfoGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.isFound = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pool = new ttypes.Pool();
        this.pool.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PoolInfoGetResult.prototype.write = function(output) {
  output.writeStructBegin('PoolInfoGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.isFound !== null && this.isFound !== undefined) {
    output.writeFieldBegin('isFound', Thrift.Type.BOOL, 2);
    output.writeBool(this.isFound);
    output.writeFieldEnd();
  }
  if (this.pool !== null && this.pool !== undefined) {
    output.writeFieldBegin('pool', Thrift.Type.STRUCT, 3);
    this.pool.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PoolTransactionsGetResult = module.exports.PoolTransactionsGetResult = function(args) {
  this.status = null;
  this.transactions = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.transactions !== undefined && args.transactions !== null) {
      this.transactions = Thrift.copyList(args.transactions, [ttypes.SealedTransaction]);
    }
  }
};
PoolTransactionsGetResult.prototype = {};
PoolTransactionsGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size74 = 0;
        var _rtmp378;
        this.transactions = [];
        var _etype77 = 0;
        _rtmp378 = input.readListBegin();
        _etype77 = _rtmp378.etype;
        _size74 = _rtmp378.size;
        for (var _i79 = 0; _i79 < _size74; ++_i79)
        {
          var elem80 = null;
          elem80 = new ttypes.SealedTransaction();
          elem80.read(input);
          this.transactions.push(elem80);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PoolTransactionsGetResult.prototype.write = function(output) {
  output.writeStructBegin('PoolTransactionsGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.transactions !== null && this.transactions !== undefined) {
    output.writeFieldBegin('transactions', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.transactions.length);
    for (var iter81 in this.transactions)
    {
      if (this.transactions.hasOwnProperty(iter81))
      {
        iter81 = this.transactions[iter81];
        iter81.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var StatsGetResult = module.exports.StatsGetResult = function(args) {
  this.status = null;
  this.stats = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.stats !== undefined && args.stats !== null) {
      this.stats = Thrift.copyList(args.stats, [ttypes.PeriodStats]);
    }
  }
};
StatsGetResult.prototype = {};
StatsGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size82 = 0;
        var _rtmp386;
        this.stats = [];
        var _etype85 = 0;
        _rtmp386 = input.readListBegin();
        _etype85 = _rtmp386.etype;
        _size82 = _rtmp386.size;
        for (var _i87 = 0; _i87 < _size82; ++_i87)
        {
          var elem88 = null;
          elem88 = new ttypes.PeriodStats();
          elem88.read(input);
          this.stats.push(elem88);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatsGetResult.prototype.write = function(output) {
  output.writeStructBegin('StatsGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.stats !== null && this.stats !== undefined) {
    output.writeFieldBegin('stats', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.stats.length);
    for (var iter89 in this.stats)
    {
      if (this.stats.hasOwnProperty(iter89))
      {
        iter89 = this.stats[iter89];
        iter89.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SmartContractGetResult = module.exports.SmartContractGetResult = function(args) {
  this.status = null;
  this.smartContract = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.smartContract !== undefined && args.smartContract !== null) {
      this.smartContract = new ttypes.SmartContract(args.smartContract);
    }
  }
};
SmartContractGetResult.prototype = {};
SmartContractGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.smartContract = new ttypes.SmartContract();
        this.smartContract.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmartContractGetResult.prototype.write = function(output) {
  output.writeStructBegin('SmartContractGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.smartContract !== null && this.smartContract !== undefined) {
    output.writeFieldBegin('smartContract', Thrift.Type.STRUCT, 2);
    this.smartContract.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SmartContractAddressesListGetResult = module.exports.SmartContractAddressesListGetResult = function(args) {
  this.status = null;
  this.addressesList = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.addressesList !== undefined && args.addressesList !== null) {
      this.addressesList = Thrift.copyList(args.addressesList, [null]);
    }
  }
};
SmartContractAddressesListGetResult.prototype = {};
SmartContractAddressesListGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size90 = 0;
        var _rtmp394;
        this.addressesList = [];
        var _etype93 = 0;
        _rtmp394 = input.readListBegin();
        _etype93 = _rtmp394.etype;
        _size90 = _rtmp394.size;
        for (var _i95 = 0; _i95 < _size90; ++_i95)
        {
          var elem96 = null;
          elem96 = input.readBinary();
          this.addressesList.push(elem96);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmartContractAddressesListGetResult.prototype.write = function(output) {
  output.writeStructBegin('SmartContractAddressesListGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.addressesList !== null && this.addressesList !== undefined) {
    output.writeFieldBegin('addressesList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.addressesList.length);
    for (var iter97 in this.addressesList)
    {
      if (this.addressesList.hasOwnProperty(iter97))
      {
        iter97 = this.addressesList[iter97];
        output.writeBinary(iter97);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SmartContractsListGetResult = module.exports.SmartContractsListGetResult = function(args) {
  this.status = null;
  this.count = null;
  this.smartContractsList = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.smartContractsList !== undefined && args.smartContractsList !== null) {
      this.smartContractsList = Thrift.copyList(args.smartContractsList, [ttypes.SmartContract]);
    }
  }
};
SmartContractsListGetResult.prototype = {};
SmartContractsListGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size98 = 0;
        var _rtmp3102;
        this.smartContractsList = [];
        var _etype101 = 0;
        _rtmp3102 = input.readListBegin();
        _etype101 = _rtmp3102.etype;
        _size98 = _rtmp3102.size;
        for (var _i103 = 0; _i103 < _size98; ++_i103)
        {
          var elem104 = null;
          elem104 = new ttypes.SmartContract();
          elem104.read(input);
          this.smartContractsList.push(elem104);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmartContractsListGetResult.prototype.write = function(output) {
  output.writeStructBegin('SmartContractsListGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 2);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.smartContractsList !== null && this.smartContractsList !== undefined) {
    output.writeFieldBegin('smartContractsList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.smartContractsList.length);
    for (var iter105 in this.smartContractsList)
    {
      if (this.smartContractsList.hasOwnProperty(iter105))
      {
        iter105 = this.smartContractsList[iter105];
        iter105.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TransactionsStateGetResult = module.exports.TransactionsStateGetResult = function(args) {
  this.status = null;
  this.states = null;
  this.roundNum = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.states !== undefined && args.states !== null) {
      this.states = Thrift.copyMap(args.states, [null]);
    }
    if (args.roundNum !== undefined && args.roundNum !== null) {
      this.roundNum = args.roundNum;
    }
  }
};
TransactionsStateGetResult.prototype = {};
TransactionsStateGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size106 = 0;
        var _rtmp3110;
        this.states = {};
        var _ktype107 = 0;
        var _vtype108 = 0;
        _rtmp3110 = input.readMapBegin();
        _ktype107 = _rtmp3110.ktype;
        _vtype108 = _rtmp3110.vtype;
        _size106 = _rtmp3110.size;
        for (var _i111 = 0; _i111 < _size106; ++_i111)
        {
          var key112 = null;
          var val113 = null;
          key112 = input.readI64();
          val113 = input.readI32();
          this.states[key112] = val113;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.roundNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransactionsStateGetResult.prototype.write = function(output) {
  output.writeStructBegin('TransactionsStateGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.states !== null && this.states !== undefined) {
    output.writeFieldBegin('states', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.I64, Thrift.Type.I32, Thrift.objectLength(this.states));
    for (var kiter114 in this.states)
    {
      if (this.states.hasOwnProperty(kiter114))
      {
        var viter115 = this.states[kiter114];
        output.writeI64(kiter114);
        output.writeI32(viter115);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.roundNum !== null && this.roundNum !== undefined) {
    output.writeFieldBegin('roundNum', Thrift.Type.I32, 3);
    output.writeI32(this.roundNum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SmartMethodParamsGetResult = module.exports.SmartMethodParamsGetResult = function(args) {
  this.status = null;
  this.method = null;
  this.params = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.method !== undefined && args.method !== null) {
      this.method = args.method;
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = Thrift.copyList(args.params, [general_ttypes.Variant]);
    }
  }
};
SmartMethodParamsGetResult.prototype = {};
SmartMethodParamsGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.method = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size116 = 0;
        var _rtmp3120;
        this.params = [];
        var _etype119 = 0;
        _rtmp3120 = input.readListBegin();
        _etype119 = _rtmp3120.etype;
        _size116 = _rtmp3120.size;
        for (var _i121 = 0; _i121 < _size116; ++_i121)
        {
          var elem122 = null;
          elem122 = new general_ttypes.Variant();
          elem122.read(input);
          this.params.push(elem122);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmartMethodParamsGetResult.prototype.write = function(output) {
  output.writeStructBegin('SmartMethodParamsGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.STRING, 2);
    output.writeString(this.method);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.params.length);
    for (var iter123 in this.params)
    {
      if (this.params.hasOwnProperty(iter123))
      {
        iter123 = this.params[iter123];
        iter123.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractAllMethodsGetResult = module.exports.ContractAllMethodsGetResult = function(args) {
  this.code = null;
  this.message = null;
  this.methods = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.methods !== undefined && args.methods !== null) {
      this.methods = Thrift.copyList(args.methods, [general_ttypes.MethodDescription]);
    }
  }
};
ContractAllMethodsGetResult.prototype = {};
ContractAllMethodsGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.code = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size124 = 0;
        var _rtmp3128;
        this.methods = [];
        var _etype127 = 0;
        _rtmp3128 = input.readListBegin();
        _etype127 = _rtmp3128.etype;
        _size124 = _rtmp3128.size;
        for (var _i129 = 0; _i129 < _size124; ++_i129)
        {
          var elem130 = null;
          elem130 = new general_ttypes.MethodDescription();
          elem130.read(input);
          this.methods.push(elem130);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractAllMethodsGetResult.prototype.write = function(output) {
  output.writeStructBegin('ContractAllMethodsGetResult');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.BYTE, 1);
    output.writeByte(this.code);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.methods !== null && this.methods !== undefined) {
    output.writeFieldBegin('methods', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.methods.length);
    for (var iter131 in this.methods)
    {
      if (this.methods.hasOwnProperty(iter131))
      {
        iter131 = this.methods[iter131];
        iter131.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SmartContractMethodArgument = module.exports.SmartContractMethodArgument = function(args) {
  this.type = null;
  this.name = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
SmartContractMethodArgument.prototype = {};
SmartContractMethodArgument.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmartContractMethodArgument.prototype.write = function(output) {
  output.writeStructBegin('SmartContractMethodArgument');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 1);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SmartContractMethod = module.exports.SmartContractMethod = function(args) {
  this.returnType = null;
  this.name = null;
  this.arguments = null;
  if (args) {
    if (args.returnType !== undefined && args.returnType !== null) {
      this.returnType = args.returnType;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.arguments !== undefined && args.arguments !== null) {
      this.arguments = Thrift.copyList(args.arguments, [ttypes.SmartContractMethodArgument]);
    }
  }
};
SmartContractMethod.prototype = {};
SmartContractMethod.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.returnType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size132 = 0;
        var _rtmp3136;
        this.arguments = [];
        var _etype135 = 0;
        _rtmp3136 = input.readListBegin();
        _etype135 = _rtmp3136.etype;
        _size132 = _rtmp3136.size;
        for (var _i137 = 0; _i137 < _size132; ++_i137)
        {
          var elem138 = null;
          elem138 = new ttypes.SmartContractMethodArgument();
          elem138.read(input);
          this.arguments.push(elem138);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmartContractMethod.prototype.write = function(output) {
  output.writeStructBegin('SmartContractMethod');
  if (this.returnType !== null && this.returnType !== undefined) {
    output.writeFieldBegin('returnType', Thrift.Type.STRING, 1);
    output.writeString(this.returnType);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.arguments !== null && this.arguments !== undefined) {
    output.writeFieldBegin('arguments', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.arguments.length);
    for (var iter139 in this.arguments)
    {
      if (this.arguments.hasOwnProperty(iter139))
      {
        iter139 = this.arguments[iter139];
        iter139.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SmartContractDataResult = module.exports.SmartContractDataResult = function(args) {
  this.status = null;
  this.methods = null;
  this.variables = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.methods !== undefined && args.methods !== null) {
      this.methods = Thrift.copyList(args.methods, [ttypes.SmartContractMethod]);
    }
    if (args.variables !== undefined && args.variables !== null) {
      this.variables = Thrift.copyMap(args.variables, [general_ttypes.Variant]);
    }
  }
};
SmartContractDataResult.prototype = {};
SmartContractDataResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size140 = 0;
        var _rtmp3144;
        this.methods = [];
        var _etype143 = 0;
        _rtmp3144 = input.readListBegin();
        _etype143 = _rtmp3144.etype;
        _size140 = _rtmp3144.size;
        for (var _i145 = 0; _i145 < _size140; ++_i145)
        {
          var elem146 = null;
          elem146 = new ttypes.SmartContractMethod();
          elem146.read(input);
          this.methods.push(elem146);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size147 = 0;
        var _rtmp3151;
        this.variables = {};
        var _ktype148 = 0;
        var _vtype149 = 0;
        _rtmp3151 = input.readMapBegin();
        _ktype148 = _rtmp3151.ktype;
        _vtype149 = _rtmp3151.vtype;
        _size147 = _rtmp3151.size;
        for (var _i152 = 0; _i152 < _size147; ++_i152)
        {
          var key153 = null;
          var val154 = null;
          key153 = input.readString();
          val154 = new general_ttypes.Variant();
          val154.read(input);
          this.variables[key153] = val154;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmartContractDataResult.prototype.write = function(output) {
  output.writeStructBegin('SmartContractDataResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.methods !== null && this.methods !== undefined) {
    output.writeFieldBegin('methods', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.methods.length);
    for (var iter155 in this.methods)
    {
      if (this.methods.hasOwnProperty(iter155))
      {
        iter155 = this.methods[iter155];
        iter155.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.variables !== null && this.variables !== undefined) {
    output.writeFieldBegin('variables', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.variables));
    for (var kiter156 in this.variables)
    {
      if (this.variables.hasOwnProperty(kiter156))
      {
        var viter157 = this.variables[kiter156];
        output.writeString(kiter156);
        viter157.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SmartContractCompileResult = module.exports.SmartContractCompileResult = function(args) {
  this.status = null;
  this.byteCodeObjects = null;
  this.tokenStandard = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.byteCodeObjects !== undefined && args.byteCodeObjects !== null) {
      this.byteCodeObjects = Thrift.copyList(args.byteCodeObjects, [general_ttypes.ByteCodeObject]);
    }
    if (args.tokenStandard !== undefined && args.tokenStandard !== null) {
      this.tokenStandard = args.tokenStandard;
    }
  }
};
SmartContractCompileResult.prototype = {};
SmartContractCompileResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size158 = 0;
        var _rtmp3162;
        this.byteCodeObjects = [];
        var _etype161 = 0;
        _rtmp3162 = input.readListBegin();
        _etype161 = _rtmp3162.etype;
        _size158 = _rtmp3162.size;
        for (var _i163 = 0; _i163 < _size158; ++_i163)
        {
          var elem164 = null;
          elem164 = new general_ttypes.ByteCodeObject();
          elem164.read(input);
          this.byteCodeObjects.push(elem164);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.tokenStandard = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmartContractCompileResult.prototype.write = function(output) {
  output.writeStructBegin('SmartContractCompileResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.byteCodeObjects !== null && this.byteCodeObjects !== undefined) {
    output.writeFieldBegin('byteCodeObjects', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.byteCodeObjects.length);
    for (var iter165 in this.byteCodeObjects)
    {
      if (this.byteCodeObjects.hasOwnProperty(iter165))
      {
        iter165 = this.byteCodeObjects[iter165];
        iter165.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tokenStandard !== null && this.tokenStandard !== undefined) {
    output.writeFieldBegin('tokenStandard', Thrift.Type.I32, 3);
    output.writeI32(this.tokenStandard);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenInfo = module.exports.TokenInfo = function(args) {
  this.address = null;
  this.code = null;
  this.name = null;
  this.totalSupply = null;
  this.owner = null;
  this.transfersCount = null;
  this.transactionsCount = null;
  this.holdersCount = null;
  this.tokenStandard = null;
  if (args) {
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.totalSupply !== undefined && args.totalSupply !== null) {
      this.totalSupply = args.totalSupply;
    }
    if (args.owner !== undefined && args.owner !== null) {
      this.owner = args.owner;
    }
    if (args.transfersCount !== undefined && args.transfersCount !== null) {
      this.transfersCount = args.transfersCount;
    }
    if (args.transactionsCount !== undefined && args.transactionsCount !== null) {
      this.transactionsCount = args.transactionsCount;
    }
    if (args.holdersCount !== undefined && args.holdersCount !== null) {
      this.holdersCount = args.holdersCount;
    }
    if (args.tokenStandard !== undefined && args.tokenStandard !== null) {
      this.tokenStandard = args.tokenStandard;
    }
  }
};
TokenInfo.prototype = {};
TokenInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.totalSupply = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.owner = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.transfersCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.transactionsCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.holdersCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.tokenStandard = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenInfo.prototype.write = function(output) {
  output.writeStructBegin('TokenInfo');
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 1);
    output.writeBinary(this.address);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 2);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.totalSupply !== null && this.totalSupply !== undefined) {
    output.writeFieldBegin('totalSupply', Thrift.Type.STRING, 4);
    output.writeString(this.totalSupply);
    output.writeFieldEnd();
  }
  if (this.owner !== null && this.owner !== undefined) {
    output.writeFieldBegin('owner', Thrift.Type.STRING, 5);
    output.writeBinary(this.owner);
    output.writeFieldEnd();
  }
  if (this.transfersCount !== null && this.transfersCount !== undefined) {
    output.writeFieldBegin('transfersCount', Thrift.Type.I32, 6);
    output.writeI32(this.transfersCount);
    output.writeFieldEnd();
  }
  if (this.transactionsCount !== null && this.transactionsCount !== undefined) {
    output.writeFieldBegin('transactionsCount', Thrift.Type.I32, 7);
    output.writeI32(this.transactionsCount);
    output.writeFieldEnd();
  }
  if (this.holdersCount !== null && this.holdersCount !== undefined) {
    output.writeFieldBegin('holdersCount', Thrift.Type.I32, 8);
    output.writeI32(this.holdersCount);
    output.writeFieldEnd();
  }
  if (this.tokenStandard !== null && this.tokenStandard !== undefined) {
    output.writeFieldBegin('tokenStandard', Thrift.Type.I32, 9);
    output.writeI32(this.tokenStandard);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenTransaction = module.exports.TokenTransaction = function(args) {
  this.token = null;
  this.transaction = null;
  this.time = null;
  this.initiator = null;
  this.method = null;
  this.params = null;
  this.state = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.transaction !== undefined && args.transaction !== null) {
      this.transaction = new ttypes.TransactionId(args.transaction);
    }
    if (args.time !== undefined && args.time !== null) {
      this.time = args.time;
    }
    if (args.initiator !== undefined && args.initiator !== null) {
      this.initiator = args.initiator;
    }
    if (args.method !== undefined && args.method !== null) {
      this.method = args.method;
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = Thrift.copyList(args.params, [general_ttypes.Variant]);
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
  }
};
TokenTransaction.prototype = {};
TokenTransaction.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.transaction = new ttypes.TransactionId();
        this.transaction.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.initiator = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.method = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size166 = 0;
        var _rtmp3170;
        this.params = [];
        var _etype169 = 0;
        _rtmp3170 = input.readListBegin();
        _etype169 = _rtmp3170.etype;
        _size166 = _rtmp3170.size;
        for (var _i171 = 0; _i171 < _size166; ++_i171)
        {
          var elem172 = null;
          elem172 = new general_ttypes.Variant();
          elem172.read(input);
          this.params.push(elem172);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenTransaction.prototype.write = function(output) {
  output.writeStructBegin('TokenTransaction');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeBinary(this.token);
    output.writeFieldEnd();
  }
  if (this.transaction !== null && this.transaction !== undefined) {
    output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 2);
    this.transaction.write(output);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I64, 3);
    output.writeI64(this.time);
    output.writeFieldEnd();
  }
  if (this.initiator !== null && this.initiator !== undefined) {
    output.writeFieldBegin('initiator', Thrift.Type.STRING, 4);
    output.writeBinary(this.initiator);
    output.writeFieldEnd();
  }
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.STRING, 5);
    output.writeString(this.method);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.params.length);
    for (var iter173 in this.params)
    {
      if (this.params.hasOwnProperty(iter173))
      {
        iter173 = this.params[iter173];
        iter173.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 7);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenHolder = module.exports.TokenHolder = function(args) {
  this.holder = null;
  this.token = null;
  this.balance = null;
  this.transfersCount = null;
  if (args) {
    if (args.holder !== undefined && args.holder !== null) {
      this.holder = args.holder;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.balance !== undefined && args.balance !== null) {
      this.balance = args.balance;
    }
    if (args.transfersCount !== undefined && args.transfersCount !== null) {
      this.transfersCount = args.transfersCount;
    }
  }
};
TokenHolder.prototype = {};
TokenHolder.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.holder = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.balance = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.transfersCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenHolder.prototype.write = function(output) {
  output.writeStructBegin('TokenHolder');
  if (this.holder !== null && this.holder !== undefined) {
    output.writeFieldBegin('holder', Thrift.Type.STRING, 1);
    output.writeBinary(this.holder);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 2);
    output.writeBinary(this.token);
    output.writeFieldEnd();
  }
  if (this.balance !== null && this.balance !== undefined) {
    output.writeFieldBegin('balance', Thrift.Type.STRING, 3);
    output.writeString(this.balance);
    output.writeFieldEnd();
  }
  if (this.transfersCount !== null && this.transfersCount !== undefined) {
    output.writeFieldBegin('transfersCount', Thrift.Type.I32, 4);
    output.writeI32(this.transfersCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenBalance = module.exports.TokenBalance = function(args) {
  this.token = null;
  this.code = null;
  this.name = null;
  this.balance = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.balance !== undefined && args.balance !== null) {
      this.balance = args.balance;
    }
  }
};
TokenBalance.prototype = {};
TokenBalance.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.balance = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenBalance.prototype.write = function(output) {
  output.writeStructBegin('TokenBalance');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeBinary(this.token);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 2);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.balance !== null && this.balance !== undefined) {
    output.writeFieldBegin('balance', Thrift.Type.STRING, 4);
    output.writeString(this.balance);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenBalancesResult = module.exports.TokenBalancesResult = function(args) {
  this.status = null;
  this.balances = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.balances !== undefined && args.balances !== null) {
      this.balances = Thrift.copyList(args.balances, [ttypes.TokenBalance]);
    }
  }
};
TokenBalancesResult.prototype = {};
TokenBalancesResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size174 = 0;
        var _rtmp3178;
        this.balances = [];
        var _etype177 = 0;
        _rtmp3178 = input.readListBegin();
        _etype177 = _rtmp3178.etype;
        _size174 = _rtmp3178.size;
        for (var _i179 = 0; _i179 < _size174; ++_i179)
        {
          var elem180 = null;
          elem180 = new ttypes.TokenBalance();
          elem180.read(input);
          this.balances.push(elem180);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenBalancesResult.prototype.write = function(output) {
  output.writeStructBegin('TokenBalancesResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.balances !== null && this.balances !== undefined) {
    output.writeFieldBegin('balances', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.balances.length);
    for (var iter181 in this.balances)
    {
      if (this.balances.hasOwnProperty(iter181))
      {
        iter181 = this.balances[iter181];
        iter181.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenTransfer = module.exports.TokenTransfer = function(args) {
  this.token = null;
  this.code = null;
  this.sender = null;
  this.receiver = null;
  this.amount = null;
  this.initiator = null;
  this.transaction = null;
  this.time = null;
  this.state = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.sender !== undefined && args.sender !== null) {
      this.sender = args.sender;
    }
    if (args.receiver !== undefined && args.receiver !== null) {
      this.receiver = args.receiver;
    }
    if (args.amount !== undefined && args.amount !== null) {
      this.amount = args.amount;
    }
    if (args.initiator !== undefined && args.initiator !== null) {
      this.initiator = args.initiator;
    }
    if (args.transaction !== undefined && args.transaction !== null) {
      this.transaction = new ttypes.TransactionId(args.transaction);
    }
    if (args.time !== undefined && args.time !== null) {
      this.time = args.time;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
  }
};
TokenTransfer.prototype = {};
TokenTransfer.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sender = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.receiver = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.amount = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.initiator = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.transaction = new ttypes.TransactionId();
        this.transaction.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenTransfer.prototype.write = function(output) {
  output.writeStructBegin('TokenTransfer');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeBinary(this.token);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 2);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  if (this.sender !== null && this.sender !== undefined) {
    output.writeFieldBegin('sender', Thrift.Type.STRING, 3);
    output.writeBinary(this.sender);
    output.writeFieldEnd();
  }
  if (this.receiver !== null && this.receiver !== undefined) {
    output.writeFieldBegin('receiver', Thrift.Type.STRING, 4);
    output.writeBinary(this.receiver);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.STRING, 5);
    output.writeString(this.amount);
    output.writeFieldEnd();
  }
  if (this.initiator !== null && this.initiator !== undefined) {
    output.writeFieldBegin('initiator', Thrift.Type.STRING, 6);
    output.writeBinary(this.initiator);
    output.writeFieldEnd();
  }
  if (this.transaction !== null && this.transaction !== undefined) {
    output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 7);
    this.transaction.write(output);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I64, 8);
    output.writeI64(this.time);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 9);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenTransfersResult = module.exports.TokenTransfersResult = function(args) {
  this.status = null;
  this.count = null;
  this.transfers = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.transfers !== undefined && args.transfers !== null) {
      this.transfers = Thrift.copyList(args.transfers, [ttypes.TokenTransfer]);
    }
  }
};
TokenTransfersResult.prototype = {};
TokenTransfersResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size182 = 0;
        var _rtmp3186;
        this.transfers = [];
        var _etype185 = 0;
        _rtmp3186 = input.readListBegin();
        _etype185 = _rtmp3186.etype;
        _size182 = _rtmp3186.size;
        for (var _i187 = 0; _i187 < _size182; ++_i187)
        {
          var elem188 = null;
          elem188 = new ttypes.TokenTransfer();
          elem188.read(input);
          this.transfers.push(elem188);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenTransfersResult.prototype.write = function(output) {
  output.writeStructBegin('TokenTransfersResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 2);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.transfers !== null && this.transfers !== undefined) {
    output.writeFieldBegin('transfers', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.transfers.length);
    for (var iter189 in this.transfers)
    {
      if (this.transfers.hasOwnProperty(iter189))
      {
        iter189 = this.transfers[iter189];
        iter189.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenTransactionsResult = module.exports.TokenTransactionsResult = function(args) {
  this.status = null;
  this.count = null;
  this.transactions = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.transactions !== undefined && args.transactions !== null) {
      this.transactions = Thrift.copyList(args.transactions, [ttypes.TokenTransaction]);
    }
  }
};
TokenTransactionsResult.prototype = {};
TokenTransactionsResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size190 = 0;
        var _rtmp3194;
        this.transactions = [];
        var _etype193 = 0;
        _rtmp3194 = input.readListBegin();
        _etype193 = _rtmp3194.etype;
        _size190 = _rtmp3194.size;
        for (var _i195 = 0; _i195 < _size190; ++_i195)
        {
          var elem196 = null;
          elem196 = new ttypes.TokenTransaction();
          elem196.read(input);
          this.transactions.push(elem196);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenTransactionsResult.prototype.write = function(output) {
  output.writeStructBegin('TokenTransactionsResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 2);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.transactions !== null && this.transactions !== undefined) {
    output.writeFieldBegin('transactions', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.transactions.length);
    for (var iter197 in this.transactions)
    {
      if (this.transactions.hasOwnProperty(iter197))
      {
        iter197 = this.transactions[iter197];
        iter197.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenInfoResult = module.exports.TokenInfoResult = function(args) {
  this.status = null;
  this.token = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.TokenInfo(args.token);
    }
  }
};
TokenInfoResult.prototype = {};
TokenInfoResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.TokenInfo();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenInfoResult.prototype.write = function(output) {
  output.writeStructBegin('TokenInfoResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenHoldersResult = module.exports.TokenHoldersResult = function(args) {
  this.status = null;
  this.count = null;
  this.holders = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.holders !== undefined && args.holders !== null) {
      this.holders = Thrift.copyList(args.holders, [ttypes.TokenHolder]);
    }
  }
};
TokenHoldersResult.prototype = {};
TokenHoldersResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size198 = 0;
        var _rtmp3202;
        this.holders = [];
        var _etype201 = 0;
        _rtmp3202 = input.readListBegin();
        _etype201 = _rtmp3202.etype;
        _size198 = _rtmp3202.size;
        for (var _i203 = 0; _i203 < _size198; ++_i203)
        {
          var elem204 = null;
          elem204 = new ttypes.TokenHolder();
          elem204.read(input);
          this.holders.push(elem204);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenHoldersResult.prototype.write = function(output) {
  output.writeStructBegin('TokenHoldersResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 2);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.holders !== null && this.holders !== undefined) {
    output.writeFieldBegin('holders', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.holders.length);
    for (var iter205 in this.holders)
    {
      if (this.holders.hasOwnProperty(iter205))
      {
        iter205 = this.holders[iter205];
        iter205.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokensListResult = module.exports.TokensListResult = function(args) {
  this.status = null;
  this.count = null;
  this.tokens = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.tokens !== undefined && args.tokens !== null) {
      this.tokens = Thrift.copyList(args.tokens, [ttypes.TokenInfo]);
    }
  }
};
TokensListResult.prototype = {};
TokensListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size206 = 0;
        var _rtmp3210;
        this.tokens = [];
        var _etype209 = 0;
        _rtmp3210 = input.readListBegin();
        _etype209 = _rtmp3210.etype;
        _size206 = _rtmp3210.size;
        for (var _i211 = 0; _i211 < _size206; ++_i211)
        {
          var elem212 = null;
          elem212 = new ttypes.TokenInfo();
          elem212.read(input);
          this.tokens.push(elem212);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokensListResult.prototype.write = function(output) {
  output.writeStructBegin('TokensListResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 2);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.tokens !== null && this.tokens !== undefined) {
    output.writeFieldBegin('tokens', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.tokens.length);
    for (var iter213 in this.tokens)
    {
      if (this.tokens.hasOwnProperty(iter213))
      {
        iter213 = this.tokens[iter213];
        iter213.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WalletInfo = module.exports.WalletInfo = function(args) {
  this.address = null;
  this.balance = null;
  this.transactionsNumber = null;
  this.firstTransactionTime = null;
  if (args) {
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.balance !== undefined && args.balance !== null) {
      this.balance = new general_ttypes.Amount(args.balance);
    }
    if (args.transactionsNumber !== undefined && args.transactionsNumber !== null) {
      this.transactionsNumber = args.transactionsNumber;
    }
    if (args.firstTransactionTime !== undefined && args.firstTransactionTime !== null) {
      this.firstTransactionTime = args.firstTransactionTime;
    }
  }
};
WalletInfo.prototype = {};
WalletInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.balance = new general_ttypes.Amount();
        this.balance.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.transactionsNumber = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.firstTransactionTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WalletInfo.prototype.write = function(output) {
  output.writeStructBegin('WalletInfo');
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 1);
    output.writeBinary(this.address);
    output.writeFieldEnd();
  }
  if (this.balance !== null && this.balance !== undefined) {
    output.writeFieldBegin('balance', Thrift.Type.STRUCT, 2);
    this.balance.write(output);
    output.writeFieldEnd();
  }
  if (this.transactionsNumber !== null && this.transactionsNumber !== undefined) {
    output.writeFieldBegin('transactionsNumber', Thrift.Type.I64, 3);
    output.writeI64(this.transactionsNumber);
    output.writeFieldEnd();
  }
  if (this.firstTransactionTime !== null && this.firstTransactionTime !== undefined) {
    output.writeFieldBegin('firstTransactionTime', Thrift.Type.I64, 4);
    output.writeI64(this.firstTransactionTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WalletsGetResult = module.exports.WalletsGetResult = function(args) {
  this.status = null;
  this.count = null;
  this.wallets = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.wallets !== undefined && args.wallets !== null) {
      this.wallets = Thrift.copyList(args.wallets, [ttypes.WalletInfo]);
    }
  }
};
WalletsGetResult.prototype = {};
WalletsGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size214 = 0;
        var _rtmp3218;
        this.wallets = [];
        var _etype217 = 0;
        _rtmp3218 = input.readListBegin();
        _etype217 = _rtmp3218.etype;
        _size214 = _rtmp3218.size;
        for (var _i219 = 0; _i219 < _size214; ++_i219)
        {
          var elem220 = null;
          elem220 = new ttypes.WalletInfo();
          elem220.read(input);
          this.wallets.push(elem220);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WalletsGetResult.prototype.write = function(output) {
  output.writeStructBegin('WalletsGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 2);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.wallets !== null && this.wallets !== undefined) {
    output.writeFieldBegin('wallets', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.wallets.length);
    for (var iter221 in this.wallets)
    {
      if (this.wallets.hasOwnProperty(iter221))
      {
        iter221 = this.wallets[iter221];
        iter221.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TrustedInfo = module.exports.TrustedInfo = function(args) {
  this.address = null;
  this.timesWriter = null;
  this.timesTrusted = null;
  this.feeCollected = null;
  if (args) {
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.timesWriter !== undefined && args.timesWriter !== null) {
      this.timesWriter = args.timesWriter;
    }
    if (args.timesTrusted !== undefined && args.timesTrusted !== null) {
      this.timesTrusted = args.timesTrusted;
    }
    if (args.feeCollected !== undefined && args.feeCollected !== null) {
      this.feeCollected = new general_ttypes.Amount(args.feeCollected);
    }
  }
};
TrustedInfo.prototype = {};
TrustedInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.timesWriter = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.timesTrusted = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.feeCollected = new general_ttypes.Amount();
        this.feeCollected.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TrustedInfo.prototype.write = function(output) {
  output.writeStructBegin('TrustedInfo');
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 1);
    output.writeBinary(this.address);
    output.writeFieldEnd();
  }
  if (this.timesWriter !== null && this.timesWriter !== undefined) {
    output.writeFieldBegin('timesWriter', Thrift.Type.I32, 2);
    output.writeI32(this.timesWriter);
    output.writeFieldEnd();
  }
  if (this.timesTrusted !== null && this.timesTrusted !== undefined) {
    output.writeFieldBegin('timesTrusted', Thrift.Type.I32, 3);
    output.writeI32(this.timesTrusted);
    output.writeFieldEnd();
  }
  if (this.feeCollected !== null && this.feeCollected !== undefined) {
    output.writeFieldBegin('feeCollected', Thrift.Type.STRUCT, 4);
    this.feeCollected.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TrustedGetResult = module.exports.TrustedGetResult = function(args) {
  this.status = null;
  this.pages = null;
  this.writers = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.pages !== undefined && args.pages !== null) {
      this.pages = args.pages;
    }
    if (args.writers !== undefined && args.writers !== null) {
      this.writers = Thrift.copyList(args.writers, [ttypes.TrustedInfo]);
    }
  }
};
TrustedGetResult.prototype = {};
TrustedGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.pages = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size222 = 0;
        var _rtmp3226;
        this.writers = [];
        var _etype225 = 0;
        _rtmp3226 = input.readListBegin();
        _etype225 = _rtmp3226.etype;
        _size222 = _rtmp3226.size;
        for (var _i227 = 0; _i227 < _size222; ++_i227)
        {
          var elem228 = null;
          elem228 = new ttypes.TrustedInfo();
          elem228.read(input);
          this.writers.push(elem228);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TrustedGetResult.prototype.write = function(output) {
  output.writeStructBegin('TrustedGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.pages !== null && this.pages !== undefined) {
    output.writeFieldBegin('pages', Thrift.Type.I32, 2);
    output.writeI32(this.pages);
    output.writeFieldEnd();
  }
  if (this.writers !== null && this.writers !== undefined) {
    output.writeFieldBegin('writers', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.writers.length);
    for (var iter229 in this.writers)
    {
      if (this.writers.hasOwnProperty(iter229))
      {
        iter229 = this.writers[iter229];
        iter229.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SyncStateResult = module.exports.SyncStateResult = function(args) {
  this.status = null;
  this.currRound = null;
  this.lastBlock = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.currRound !== undefined && args.currRound !== null) {
      this.currRound = args.currRound;
    }
    if (args.lastBlock !== undefined && args.lastBlock !== null) {
      this.lastBlock = args.lastBlock;
    }
  }
};
SyncStateResult.prototype = {};
SyncStateResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.currRound = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.lastBlock = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SyncStateResult.prototype.write = function(output) {
  output.writeStructBegin('SyncStateResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.currRound !== null && this.currRound !== undefined) {
    output.writeFieldBegin('currRound', Thrift.Type.I64, 2);
    output.writeI64(this.currRound);
    output.writeFieldEnd();
  }
  if (this.lastBlock !== null && this.lastBlock !== undefined) {
    output.writeFieldBegin('lastBlock', Thrift.Type.I64, 3);
    output.writeI64(this.lastBlock);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExecuteCountGetResult = module.exports.ExecuteCountGetResult = function(args) {
  this.status = null;
  this.executeCount = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.executeCount !== undefined && args.executeCount !== null) {
      this.executeCount = args.executeCount;
    }
  }
};
ExecuteCountGetResult.prototype = {};
ExecuteCountGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.executeCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExecuteCountGetResult.prototype.write = function(output) {
  output.writeStructBegin('ExecuteCountGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.executeCount !== null && this.executeCount !== undefined) {
    output.writeFieldBegin('executeCount', Thrift.Type.I64, 2);
    output.writeI64(this.executeCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenFilters = module.exports.TokenFilters = function(args) {
  this.name = null;
  this.code = null;
  this.tokenStandard = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.tokenStandard !== undefined && args.tokenStandard !== null) {
      this.tokenStandard = args.tokenStandard;
    }
  }
};
TokenFilters.prototype = {};
TokenFilters.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.tokenStandard = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenFilters.prototype.write = function(output) {
  output.writeStructBegin('TokenFilters');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 2);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  if (this.tokenStandard !== null && this.tokenStandard !== undefined) {
    output.writeFieldBegin('tokenStandard', Thrift.Type.I32, 3);
    output.writeI32(this.tokenStandard);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

